# coding: utf-8

"""
    NI-NFVO

    NFVO module service for the NI project.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: vantu.bkhn@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ni_custom_client.api_client import ApiClient


class ScalingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client


    def create_scaling(self, **kwargs):  # noqa: E501
        """Create a Scaling. Return Scaling if success.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_scaling(prefix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SfcSpec sfc_spec: Sfc information including Sfcr ID and vnf instance ids. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_scaling_with_http_info( **kwargs)  # noqa: E501
        else:
            (data) = self.create_scaling_with_http_info( **kwargs)  # noqa: E501
            return data

    def create_scaling_with_http_info(self, **kwargs):  # noqa: E501
        """Create a Sfc. Return sfc ID if success.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_sfc_with_http_info(sfc_spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SfcSpec sfc_spec: Sfc information including Sfcr ID and vnf instance ids. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scaling_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_sfc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sfc_spec' is set
        if self.api_client.client_side_validation and ('scaling_info' not in params or
                                                       params['scaling_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `scaling_info` when calling `create_scaling`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scaling_info' in params:
            body_params = params['scaling_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/create_scaling/dqn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)


    def delete_scaling(self, name, **kwargs):  # noqa: E501

        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_scaling_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_scaling_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_scaling_with_http_info(self, name, **kwargs):  # noqa: E501

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_sfc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sfc_spec' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `delete_scaling`")  # noqa: E501

        collection_formats = {}
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        return self.api_client.call_api(
            '/delete_scaling/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)










    '''
    def update_sfc(self, id, sfc_update_spec, **kwargs):  # noqa: E501
        """Update a new sfc path or new sfcrs.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sfc(id, sfc_update_spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: sfc id (required)
        :param SfcUpdateSpec sfc_update_spec: Sfc Update info. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_sfc_with_http_info(id, sfc_update_spec, **kwargs)  # noqa: E501
        else:
            (data) = self.update_sfc_with_http_info(id, sfc_update_spec, **kwargs)  # noqa: E501
            return data

    def update_sfc_with_http_info(self, id, sfc_update_spec, **kwargs):  # noqa: E501
        """Update a new sfc path or new sfcrs.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sfc_with_http_info(id, sfc_update_spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: sfc id (required)
        :param SfcUpdateSpec sfc_update_spec: Sfc Update info. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sfc_update_spec']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sfc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_sfc`")  # noqa: E501
        # verify the required parameter 'sfc_update_spec' is set
        if self.api_client.client_side_validation and ('sfc_update_spec' not in params or
                                                       params['sfc_update_spec'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sfc_update_spec` when calling `update_sfc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sfc_update_spec' in params:
            body_params = params['sfc_update_spec']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sfcs/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
   '''
